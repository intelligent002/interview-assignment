volumes:
  grafana-data:
  mongo-config:
  mongo-data:
  prometheus-data:
  redis-data:
  redpanda-data:

networks:
  default:
    driver: bridge
    # prevent conflict with openVPN connection, use dedicated subnet
    ipam:
      config:
        - subnet: 172.16.57.0/24

services:

  test:
    build:
      context: ./crawler
      dockerfile: Dockerfile-worker
      target: test
    restart: no
    env_file:
      - .env

  cli:
    build:
      context: ./crawler
      dockerfile: Dockerfile-cli
      target: production
    restart: no
    env_file:
      - .env
    deploy:
      replicas: 0
      restart_policy:
        condition: on-failure
    depends_on:
      - redpanda
    networks:
      - default

  worker:
    build:
      context: ./crawler
      dockerfile: Dockerfile-worker
      target: production
    restart: always
    env_file:
      - .env
    deploy:
      replicas: 3
      restart_policy:
        condition: on-failure
    expose:
      - "8080"
    depends_on:
      - redpanda
      - redis
      - mongo
    networks:
      - default

  redpanda:
    image: docker.redpanda.com/vectorized/redpanda:latest
    restart: always
    networks:
      - default
    command:
      - redpanda start
      - --smp 1
      - --memory 1G
      - --reserve-memory 0M
      - --overprovisioned
      - --node-id 0
      - --check=false
      - --pandaproxy-addr INSIDE://0.0.0.0:28082,OUTSIDE://0.0.0.0:8082
      - --advertise-pandaproxy-addr INSIDE://redpanda:28082,OUTSIDE://localhost:8082
      - --kafka-addr INSIDE://0.0.0.0:29092,OUTSIDE://0.0.0.0:9092
      - --advertise-kafka-addr INSIDE://redpanda:29092,OUTSIDE://localhost:9092
      - --rpc-addr 0.0.0.0:33145
      - --advertise-rpc-addr redpanda:33145
    volumes:
      - redpanda-data:/var/lib/redpanda/data
    environment:
      - KAFKAJS_NO_PARTITIONER_WARNING=1
    ports:
      - "8081:8081"
      - "8082:8082"
      - "9092:9092"
      - "9644:9644"

  redpanda-ui:
    image: docker.redpanda.com/vectorized/console:latest
    entrypoint: /bin/sh
    command: -c "echo \"$$CONSOLE_CONFIG_FILE\" > /tmp/config.yml; /app/console"
    restart: always
    networks:
      - default
    environment:
      CONFIG_FILEPATH: /tmp/config.yml
      CONSOLE_CONFIG_FILE: |
        kafka:
          brokers: ["redpanda:29092"]
          schemaRegistry:
            enabled: false
            urls: ["http://redpanda:8081"]
        redpanda:
          adminApi:
            enabled: true
            urls: ["http://redpanda:9644"]
        connect:
          enabled: false
          clusters:
            - name: local-connect-cluster
              url: http://redpanda:8083
    ports:
      - "8014:8080"
    depends_on:
      - redpanda

  mongo:
    image: mongo:4.2
    restart: always
    networks:
      - default
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
      - mongo-config:/data/configdb

  # Prometheus
  prometheus:
    build:
      context: ./prometheus
      dockerfile: Dockerfile
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --web.enable-lifecycle
    healthcheck:
      # Test availability of Prometheus service, listening & actually serving
      interval: 60s
      retries: 3
      start_period: 3s
      test: [ "CMD-SHELL", "curl -f http://localhost:9090/-/healthy || exit 1" ]
      timeout: 10s
    networks:
      - default
    ports:
      - "9091:9090"
    restart: always
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus/rules/:/etc/prometheus/rules/
      - prometheus-data:/prometheus

  grafana:
    build:
      context: ./grafana
      dockerfile: Dockerfile
    depends_on:
      - prometheus
    env_file:
      - .env
    healthcheck:
      # Test availability of Grafana service, listening & actually serving
      interval: 60s
      retries: 3
      start_period: 3s
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      timeout: 10s
    networks:
      - default
    ports:
      - "3000:3000"
    restart: always
    volumes:
      - grafana-data:/var/lib/grafana

  # Redis for rate-limiting
  redis:
    build:
      context: ./redis
      dockerfile: Dockerfile
    env_file:
      - ./redis/.env
    healthcheck:
      # Test availability of Redis service, listening & serving - via inline redis-cli request
      interval: 60s
      retries: 3
      start_period: 3s
      test: ["CMD-SHELL", "response=$$(redis-cli -u redis://user:pass@127.0.0.1:6379 ping); \
                if [ \"$$response\" != \"PONG\" ]; then echo \"Status is not OK\" && exit 1; else echo \"Status is OK\" && exit 0; fi"]
      timeout: 10s
    networks:
      - default
    ports:
      - "6379:6379"
    restart: always
    volumes:
      - redis-data:/data

#  redis-commander:
#    container_name: redis-commander
#    hostname: redis-commander
#    image: rediscommander/redis-commander:latest
#    restart: always
#    environment:
#      - REDIS_USERNAME=user
#      - REDIS_PASSWORD=pass
#      - REDIS_HOST=redis
#    ports:
#      - "8084:8081"

