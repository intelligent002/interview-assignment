volumes:
  grafana-data:
  mongo-config:
  mongo-data:
  prometheus-data:
  redis-data:

services:
  test:
    build:
      context: ./crawler
      dockerfile: Dockerfile-worker
      target: test
    restart: no
    env_file:
      - .env-cluster

  cli:
    build:
      context: ./crawler
      dockerfile: Dockerfile-cli
      target: production
    restart: no
    env_file:
      - .env-cluster
    deploy:
      replicas: 0
      restart_policy:
        condition: on-failure

  worker:
    build:
      context: ./crawler
      dockerfile: Dockerfile-worker
      target: production
    restart: always
    env_file:
      - .env-cluster
    deploy:
      replicas: 3
      restart_policy:
        condition: on-failure
    expose:
      - "8080"
    depends_on:
      - redis
      - mongo

  mongo:
    image: mongo:4.2
    restart: always
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
      - mongo-config:/data/configdb

  # Prometheus
  prometheus:
    build:
      context: ./prometheus
      dockerfile: Dockerfile
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --web.enable-lifecycle
    healthcheck:
      # Test availability of Prometheus service, listening & actually serving
      interval: 60s
      retries: 3
      start_period: 3s
      test: [ "CMD-SHELL", "curl -f http://localhost:9090/-/healthy || exit 1" ]
      timeout: 10s
    ports:
      - "9091:9090"
    restart: always
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus/rules/:/etc/prometheus/rules/
      - prometheus-data:/prometheus

  grafana:
    build:
      context: ./grafana
      dockerfile: Dockerfile
    depends_on:
      - prometheus
    env_file:
      - .env-cluster
    healthcheck:
      # Test availability of Grafana service, listening & actually serving
      interval: 60s
      retries: 3
      start_period: 3s
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      timeout: 10s
    ports:
      - "3000:3000"
    restart: always
    volumes:
      - grafana-data:/var/lib/grafana

  # Redis for rate-limiting
  redis:
    build:
      context: ./redis
      dockerfile: Dockerfile
    env_file:
      - ./redis/.env
    healthcheck:
      # Test availability of Redis service, listening & serving - via inline redis-cli request
      interval: 60s
      retries: 3
      start_period: 3s
      test: ["CMD-SHELL", "response=$$(redis-cli -u redis://user:pass@127.0.0.1:6379 ping); \
                if [ \"$$response\" != \"PONG\" ]; then echo \"Status is not OK\" && exit 1; else echo \"Status is OK\" && exit 0; fi"]
      timeout: 10s
    ports:
      - "6379:6379"
    restart: always
    volumes:
      - redis-data:/data
